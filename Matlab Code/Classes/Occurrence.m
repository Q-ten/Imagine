% An Occurrance forms part of the history of a sim. It contains the
% information we need to store about an ImagineEvent being triggered.

classdef Occurrence < handle
    
   properties
       
       eventName
       
       monthIndex
       
       monthDay
       
       % costItems is a list of CostItem objects with 
       % costName, quantity (an Amount), price (a Rate), and cost (an
       % Amount)
       costItems
       
       % products is a list of Product objects with
       % quantity (an Amount), price (a Rate), and income (an
       % Amount)
       products
       
       % Outputs are a list of outptus generated by the event occuring.
       % The outputs are not calculated for every month, start and end like
       % the state outputs are. Instead they are attached to the event.
       % When it comes to providing costs and income, it is possible to use
       % the eventOutputs to quantise the events.
       % We could look at defining event happened previously triggers that
       % take a quantity for the specified event, which could be the
       % output. This is not on the cards for implementation right now
       % though.
       %
       % The eventOutputs will each be an Amount (or Rate) - for example,
       % it might be tonnes of leaves per tree. It might not be appropriate
       % for it to be a product directly.
       %
       % Similarly, id we want to calculate the cost of an event in detail,
       % we can put the cost in an output. The user would then be able to
       % use it as a base unit for costs when defining the cost trend. A
       % trend of 1, with 0 standard deviation would use exactly the
       % calculated cost for the actual cost.
       % Clearly, costs will need to be calcualted after the products and
       % the eventOutputs are calculated.
       eventOutputs
             
   end
    
   properties (Dependent)
      
       eventCost
       eventIncome
       eventProfit
       
   end
    
   % Constructor
   methods
   
       function oc = Occurrence(eventName, productAmounts, eventOutputAmounts, plantedCrop, sim)
       
           if nargin == 0
              return 
           elseif nargin == 5
               oc.eventName = eventName;
               oc.monthIndex = sim.monthIndex;
               oc.monthDay = sim.monthDay;

               noCost = false;
               if length(eventName) >= 19
                   k = strfind(eventName, QuantityBasedCondition.nullEventName);
                   if length(k) == 1 && k == 1
                        noCost = true;
                   end
               end
               
                oc.eventOutputs = eventOutputAmounts;
               
               if ~noCost
                   oc.costItems = CostItem(eventName, plantedCrop, sim, eventOutputAmounts, productAmounts);
               else
                   oc.costItems = CostItem.empty(1, 0);
               end
               
               if ~isempty(oc.costItems)
                   if isempty(oc.costItems.quantity)
                        a = 1;
                   end
               end
               
               prods = Product.empty(length(productAmounts), 0);
               
               for i = 1:length(productAmounts)                   
                  prods(i) = Product(plantedCrop.cropObject.name, productAmounts(i), sim);
               end
               
               oc.products = prods;
               
           else 
              error('Occurrence class requires 0 or 5 arguments to the constructor.'); 
           end
           
       end
   end
   
   % Get methods for dependent properties
   methods 
      
       function eC = get.eventCost(obj)
           eC = Amount(0, Unit('', 'Money', 'Dollar'));
           for i = 1:length(obj.costItems)
               eC = eC + obj.costItems(i).cost;
           end
       end
       
       function eIn = get.eventIncome(obj)
           eIn = Amount(0, Unit('', 'Money', 'Dollar'));
           for i = 1:length(obj.products)
               eIn = eIn + obj.products(i).income;
           end           
       end
       
       function eP = get.eventProfit(obj)
           eP = obj.eventIncome - obj.eventCost;
       end
       
   end
   
end
