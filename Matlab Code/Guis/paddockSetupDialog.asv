function varargout = paddockSetupDialog(varargin)
% PADDOCKSETUPDIALOG M-file for paddockSetupDialog.fig
%      PADDOCKSETUPDIALOG, by itself, creates a new PADDOCKSETUPDIALOG or raises the existing
%      singleton*.
%
%      H = PADDOCKSETUPDIALOG returns the handle to a new PADDOCKSETUPDIALOG or the handle to
%      the existing singleton*.
%
%      PADDOCKSETUPDIALOG('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in PADDOCKSETUPDIALOG.M with the given input arguments.
%
%      PADDOCKSETUPDIALOG('Property','Value',...) creates a new PADDOCKSETUPDIALOG or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before paddockSetupDialog_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to paddockSetupDialog_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help paddockSetupDialog

% Last Modified by GUIDE v2.5 02-May-2012 05:27:48

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @paddockSetupDialog_OpeningFcn, ...
                   'gui_OutputFcn',  @paddockSetupDialog_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before paddockSetupDialog is made visible.
function paddockSetupDialog_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to paddockSetupDialog (see VARARGIN)

% Choose default command line output for paddockSetupDialog
handles.output = hObject;
imo = ImagineObject.getInstance();
handles.paddockLength = imo.paddockLength;
handles.paddockWidth = imo.paddockWidth;

pos = get(handles.axes1, 'Position');
handles.xmid = pos(1) + 0.5 * pos(3);
handles.ymid = pos(2) + 0.5 * pos(4);
handles.axesMaxSide = max(pos(3:4));

axes(handles.axes1);

line([50 150], [100 100], 'Color', 'k', 'LineWidth', 2) 
text(50, 200, '100 m');
% Update handles structure
guidata(hObject, handles);

updateSize(handles);

% UIWAIT makes paddockSetupDialog wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = paddockSetupDialog_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;



function lengthEdit_Callback(hObject, eventdata, handles)
% hObject    handle to lengthLabel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of lengthLabel as text
%        str2double(get(hObject,'String')) returns contents of lengthLabel as a double
updateSize(handles);

% --- Executes during object creation, after setting all properties.
function lengthEdit_CreateFcn(hObject, eventdata, handles)
% hObject    handle to lengthLabel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function widthEdit_Callback(hObject, eventdata, handles)
% hObject    handle to widthLabel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of widthLabel as text
%        str2double(get(hObject,'String')) returns contents of widthLabel as a double
updateSize(handles);

% --- Executes during object creation, after setting all properties.
function widthEdit_CreateFcn(hObject, eventdata, handles)
% hObject    handle to widthLabel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in acceptButton.
function acceptButton_Callback(hObject, eventdata, handles)
% hObject    handle to acceptButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

imo = ImagineObject.getInstance;
imo.set = handles.paddockLength;
imo.paddockWidth  = handles.paddockWidth;
close(gcf);


% --- Executes on button press in cancelButton.
function cancelButton_Callback(hObject, eventdata, handles)
% hObject    handle to cancelButton (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
close(gcf);


% Sets the size, calculates the resulting area and updates the label.
% Resizes the axes to indicate the size.
function updateSize(handles)

% Make sure the given dimensions are ok.
paddockLength = str2double(get(handles.lengthEdit, 'String'));
paddockWidth = str2double(get(handles.widthEdit, 'String'));

minLength = 200;

if(isnan(paddockLength))
    paddockLength = handles.paddockLength;
else
    if(paddockLength < minLength)
        paddockLength = minLength;
    end
end

if(isnan(paddockWidth))
    paddockWidth = handles.paddockWidth;
else
    if(paddockWidth < minLength)
        paddockWidth = minLength;
    end
end

if(paddockWidth > 10 * paddockLength)
    if(paddockLength == handles.paddockLength)
        % we changed paddockWidth - so make the length go up to match.
        paddockLength = paddockWidth / 10; 
    else
        paddockWidth = paddockLength * 10; 
    end
elseif (paddockLength > 10 * paddockWidth)
    if(paddockLength == handles.paddockLength)
        % adjust paddockWidth
        paddockLength = paddockWidth * 10; 
    else
        paddockWidth = paddockLength / 10;
    end    
end



handles.paddockLength = paddockLength;
handles.paddockWidth = paddockWidth;
set(handles.lengthEdit, 'String', num2str(paddockLength, '%.0f'));
set(handles.widthEdit, 'String', num2str(paddockWidth, '%.0f'));

axes(handles.axes1);
axis([0 handles.paddockLength 0 handles.paddockWidth]);

guidata(handles.axes1, handles);

% Dimensions now garaunteed to be ok.

area = paddockLength * paddockWidth / 10000;
set(handles.areaLabel, 'String', num2str(area, '%.1f'));

% Use position information in handles to resize the axes itself.

if(paddockLength > paddockWidth)
   x = handles.xmid + 0.5 * handles.axesMaxSide * [-1 1];
   y = handles.ymid + 0.5 * handles.axesMaxSide * paddockWidth / paddockLength * [-1 1];
else
   x = handles.xmid + 0.5 * handles.axesMaxSide * paddockLength / paddockWidth * [-1 1];
   y = handles.ymid + 0.5 * handles.axesMaxSide * [-1 1];    
end

set(handles.axes1, 'Position', [x(1), y(1), x(2) - x(1), y(2) - y(1)]);
