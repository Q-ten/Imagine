function varargout = ManualAnnualGMDialog(varargin)
% MANUALANNUALGMDIALOG M-file for ManualAnnualGMDialog.fig
%      MANUALANNUALGMDIALOG, by itself, creates a new MANUALANNUALGMDIALOG or raises the existing
%      singleton*.
%
%      H = MANUALANNUALGMDIALOG returns the handle to a new MANUALANNUALGMDIALOG or the handle to
%      the existing singleton*.
%
%      MANUALANNUALGMDIALOG('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in MANUALANNUALGMDIALOG.M with the given input arguments.
%
%      MANUALANNUALGMDIALOG('Property','Value',...) creates a new MANUALANNUALGMDIALOG or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before ManualAnnualGMDialog_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to ManualAnnualGMDialog_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help ManualAnnualGMDialog

% Last Modified by GUIDE v2.5 12-Jan-2013 15:48:35

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @ManualAnnualGMDialog_OpeningFcn, ...
                   'gui_OutputFcn',  @ManualAnnualGMDialog_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before ManualAnnualGMDialog is made visible.
function ManualAnnualGMDialog_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to ManualAnnualGMDialog (see VARARGIN)

% Choose default command line output for ManualAnnualGMDialog
handles.output = [];
handles.trend = Trend.empty();

if (nargin >= 4)
    handles.trend = varargin{1};
    if ~isa(handles.trend, 'Trend')
        handles.trend = Trend.empty(1, 0);
    end
end
if isempty(handles.trend)
    handles.trend = Trend;    
end

handles.HIData = HarvestIndexData.empty(1, 0); 
if (nargin >= 5)
   handles.HIData = varargin{2};
   if ~isa(handles.HIData, 'HarvestIndexData')
      handles.HIData = HarvestIndexData.empty(1, 0); 
   end
end
if isempty(handles.HIData)
   handles.HIData = HarvestIndexData; 
end


% Update handles structure
guidata(hObject, handles);

populateDialog(handles);

% Need to load the trend dialogue. 
loadTrendPanel(handles);
handles = guidata(hObject);

setTrend(handles);

setupForYearlyDataOnly(handles);

% UIWAIT makes ManualAnnualGMDialog wait for user response (see UIRESUME)
uiwait(handles.figure1);

function populateDialog(handles)

unitOptions = get(handles.popupmenuHarvestUnits, 'String');
ix = find(strcmp(unitOptions, handles.units), '1', 'first');
if (isempty(ix))
   error('The HIData units should match one of the entries in the popupmenu.'); 
end
set(handles.popupmenuHarvestUnits, 'Value', ix);
set(handles.editHI, 'String', num2str(handles.HI));

if (strcmp(handles.units, 'Yield'))
    set(handles.editHI, 'Enable', 'off');
end



% --- Outputs from this function are returned to the command line.
function varargout = ManualAnnualGMDialog_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;
close(gcf);

% --- Executes on button press in pushbuttonOk.
function pushbuttonOk_Callback(hObject, eventdata, handles)
% hObject    handle to pushbuttonOk (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

handles.output = handles.trend;
guidata(hObject, handles);
uiresume(handles.figure1);

% --- Executes on button press in pushbuttonCancel.
function pushbuttonCancel_Callback(hObject, eventdata, handles)
% hObject    handle to pushbuttonCancel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

handles.output = [];
guidata(hObject, handles);
uiresume(handles.figure1);


% This function loads the trend dialog into the trendPanel. Handles to the 
% trendPanel's controls are provided in handles.trendHandles
function loadTrendPanel(handles)

% Load the trendDialogue fig.
td = load('trendDialogue.fig', '-MAT');
if(~isempty(td.hgS_070000.children))
    hs =  struct2handle(td.hgS_070000.children, repmat(handles.trendPanel, length(td.hgS_070000.children), 1), 'convert');  
    trendHandles = grabHandles(hs);
end

handles = combineFields(handles, trendHandles);

handles.trendHandles = trendHandles;
guidata(handles.trendPanel, handles);


% setTrend looks up the priceModels in stepData and sets the trend to the
% one given by pmIndex.
%
% It also needs to set the enable, the string and the value for the units
% drop down list.
function setTrend(handles)

trend = handles.trend;

if isempty(trend)
   trend = Trend(); 
end

handles.trendData.trend = trend;

guidata(handles.trendPanel, handles);

set(handles.trendHandles.trendDataEdit, 'String', '');
set(handles.trendHandles.varDataEdit, 'String', '');
    
trendDialogue('loadTrendData', handles);


% Save trend gets the data from handles.trendData.
function saveTrend(handles)

handles.trend = handles.trendData.trend;
guidata(handles.trendPanel, handles);


function setupForYearlyDataOnly(handles)

types = get(handles.trendHandles.trendTypeDDL, 'String');
ix = find(strcmp(types, 'Yearly Data'), 1, 'first');

if isempty(ix)
   error('One of the options for the types of trend needs to be ''Yearly Data''');  
end

set(handles.trendHandles.trendTypeDDL, 'Value', ix);
set(handles.trendHandles.varTypeDDL, 'Value', ix);

set(handles.trendHandles.trendTypeDDL, 'Enable', 'off');
set(handles.trendHandles.varTypeDDL, 'Enable', 'off');

trendDialogue('trendTypeDDL_Callback', handles.trendHandles.trendTypeDDL, [], handles.trendHandles);
trendDialogue('varTypeDDL_Callback', handles.trendHandles.varTypeDDL, [], handles.trendHandles);


% --- Executes on selection change in popupmenuHarvestUnits.
function popupmenuHarvestUnits_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenuHarvestUnits (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenuHarvestUnits contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenuHarvestUnits


% --- Executes during object creation, after setting all properties.
function popupmenuHarvestUnits_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenuHarvestUnits (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function editHI_Callback(hObject, eventdata, handles)
% hObject    handle to editHI (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of editHI as text
%        str2double(get(hObject,'String')) returns contents of editHI as a double


% --- Executes during object creation, after setting all properties.
function editHI_CreateFcn(hObject, eventdata, handles)
% hObject    handle to editHI (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
